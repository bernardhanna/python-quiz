[
{
    "category": "q2",
    "question": "import datetime and def the function def get_next_birthday",
    "answer": "import datetime\n def get_next_birthday(dob_str):\n"
  },
  {
    "category": "q2",
    "question": "Convert the date of birth string into a date object",
    "answer": "dob = datetime.datetime.strptime(dob_str, '%d/%m/%Y')"
  },
  {
    "category": "q2",
    "question": "Get the current date",
    "answer": "current_date = datetime.datetime.now()"
  },
  {
    "category": "q2",
    "question": "Create a date object for their birthday this year",
    "answer": "this_year_birthday = dob.replace(year=current_date.year)"
  },
  {
    "category": "q2",
    "question": "Create a date object for their birthday this year",
    "answer": "this_year_birthday = dob.replace(year=current_date.year)"
  },
  {
    "category": "q2",
    "question": "If their birthday this year has passed, then Create a date object for their birthday next year",
    "answer": "if current_date > this_year_birthday:\n next_year_birthday = this_year_birthday.replace(year=current_date.year + 1)\n else: \n  next_year_birthday = this_year_birthday"
  },
  {
    "category": "q2",
    "question": "Return the birthday in the format dd/mm/YYYY",
    "answer": "return next_year_birthday.strftime('%d/%m/%Y')"
  },
  {
    "category": "q2",
    "question": "import the random module and create an empty dictionary for candidates",
    "answer": "import random\nresults = {}"
  },
  {
    "category": "q2",
    "question": "Use a loop with random.choice to input candidate names until 'q' is entered. Initialize each new candidate in the dictionary with zero votes",
    "answer": "candidates = ['Alice', 'Bob', 'Charlie']\nwhile True:\n  candidate = random.choice(candidates)\n  if candidate == 'q':\n    break\n  elif candidate in results:\n    print('Candidate already included')\n  else:\n    results[candidate] = 0\nif len(results) == 0:\n  print('No candidates entered, quitting')\n  sys.exit()"
  },
  {
    "category": "q2",
    "question": "initialize the round and create an empty list called 'eliminated' using list methods",
    "answer": "round = 1\neliminated = list()"
  },
  {
    "category": "q2",
    "question": "In each voting round, shuffle the candidate names and then display them in alphabetical order. Collect votes using randint",
    "answer": "while True:\n  print('\\nRound:', round)\n  random.shuffle(candidates)\n  for candidate in sorted(candidates):\n    if candidate in results:\n      results[candidate] += random.randint(1, 100)"
  },
  {
    "category": "q2",
    "question": "After collecting votes, use dict methods to find and display the candidate with the least votes and remove them",
    "answer": "total_votes = sum(results.values())\n  if total_votes > 0:\n    loser = min(results.items(), key=lambda x: x[1])[0]\n    print('Eliminating candidate with least votes:', loser)\n    results.pop(loser)\n    eliminated.append(loser)\n  else:\n    break"
  },
  {
    "category": "q2",
    "question": "Use datetime.now() to timestamp when the winner is determined and display the time with the winning candidate's name",
    "answer": "from datetime import datetime\n  leader = max(results.items(), key=lambda x: x[1])[0]\n  if results[leader] / total_votes > 0.5:\n    print('Winner:', leader, 'at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n    break"
  },
  {
    "category": "q2",
    "question": "Display the eliminated candidates and the round they were eliminated using list and dict methods",
    "answer": "print('\\nEliminated Candidates:')\nfor i, candidate in enumerate(eliminated, start=1):\n  print(f'Round {i}: {candidate}')"
  },
  {
    "category": "q2",
    "question": "How do you open a shelve file for persistent data storage and ensure it's automatically closed after use?",
    "answer": "with shelve.open('filename') as shelve_file:"
  },
  {
    "category": "q2",
    "question": "After opening a shelve file, how do you add a new candidate with zero votes to the shelve dictionary?",
    "answer": "with shelve.open('filename') as shelve_file:\n  shelve_file['new_candidate'] = 0"
  },
  {
    "category": "q2",
    "question": "How do you update a candidate's vote count in a shelve file?",
    "answer": "with shelve.open('filename') as shelve_file:\n  shelve_file['candidate_name'] = shelve_file.get('candidate_name', 0) + new_votes"
  },
  {
    "category": "q2",
    "question": "How do you retrieve a candidate's vote count from a shelve file?",
    "answer": "with shelve.open('filename') as shelve_file:\n  votes = shelve_file.get('candidate_name', 0)"
  },
  {
    "category": "q2",
    "question": "How do you remove a candidate from the shelve dictionary?",
    "answer": "with shelve.open('filename') as shelve_file:\n  del shelve_file['candidate_name']"
  }
]
